#!/usr/bin/env python3

import requests
import sys
import validators

# Basic user interface header
print(""" _______  _______  _        ______   _______  _______  _______  _______  ______
(  ____ )(  ___  )( (    /|(  __  \ (  ___  )(       )(  ____ )(  ____ \(  __  \ |\     /|
| (    )|| (   ) ||  \  ( || (  \  )| (   ) || () () || (    )|| (    \/| (  \  )( \   / )
| (____)|| (___) ||   \ | || |   ) || |   | || || || || (____)|| (__    | |   ) | \ (_) / 
|     __)|  ___  || (\ \) || |   | || |   | || |(_)| ||     __)|  __)   | |   | |  ) _ (  
| (\ (   | (   ) || | \   || |   ) || |   | || |   | || (\ (   | (      | |   ) | / ( ) \ 
| ) \ \__| )   ( || )  \  || (__/  )| (___) || )   ( || ) \ \__| (____/\| (__/  )( /   \ )
|/   \__/|/     \||/    )_)(______/ (_______)|/     \||/   \__/(_______/(______/ |/     \|
                    | 2025 Created by Marcelo M / @Xenclash on Github |
""")

# List of important security headers to check
security_headers = [
    'Strict-Transport-Security',
    'X-Content-Type-Options',
    'X-Frame-Options',
    'Content-Security-Policy',
    'Referrer-Policy',
    'Permissions-Policy',
    'Access-Control-Allow-Origin'
]

def check_headers(url):
    try:
        # Send a GET request to the website with a timeout
        response = requests.get(url, timeout=10)

        # Inform the user if a redirect occurred
        if response.history:
            print(f"Redirected to: {response.url}\n")

        print(f"Checking headers for: {url}\n")
        missing_headers = []
        misconfigured_headers = []

        # Loop through each header in the security list
        for header in security_headers:
            if header not in response.headers:
                missing_headers.append(header)
            else:
                # Specific checks for misconfigured headers
                if header == 'Access-Control-Allow-Origin':
                    if response.headers[header] != '*':
                        misconfigured_headers.append(f"{header}: {response.headers[header]} (non-wildcard allowed)")
                elif header == 'Strict-Transport-Security':
                    if 'max-age' not in response.headers[header]:
                        misconfigured_headers.append(f"{header}: {response.headers[header]} (missing max-age)")

        # Print missing headers
        if missing_headers:
            print("Missing headers:")
            for header in missing_headers:
                print(f"- {header}")
        else:
            print("All security headers are present!")

        # Print misconfigured headers
        if misconfigured_headers:
            print("\nMisconfigured headers:")
            for header in misconfigured_headers:
                print(f"- {header}")
        else:
            print("No misconfigurations found!")

        # Summary
        print("\nSummary:")
        print(f"- Total missing headers: {len(missing_headers)}")
        print(f"- Total misconfigured headers: {len(misconfigured_headers)}")

    except requests.exceptions.RequestException as e:
        print(f"Error fetching the URL: {e}")

if __name__ == "__main__":
    # Check if a URL was provided as a command-line argument
    if len(sys.argv) < 2:
        print("Usage: randomredx <url>")
        sys.exit(1)

    # Get the URL from the command-line arguments
    url = sys.argv[1].strip()

    # Validate the URL
    if not validators.url(url):
        print("Error: Invalid URL. Please provide a valid URL (e.g., https://example.com).")
        sys.exit(1)

    # Optional: Enforce HTTPS
    if not url.startswith("https://"):
        print("Warning: The URL does not use HTTPS. Consider using a secure connection.")

    check_headers(url)
